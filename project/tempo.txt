////// text input
html:

<p>
	<span class="input">
		<input type="text" placeholder="Gradient border focus fun">
		<span></span>
	</span>
</p>




css:
.input {
	// needs to be relative so the :focus span is positioned correctly
	position: relative;

	// bigger font size for demo purposes
	font-size: 1.5em;

	// the border gradient
	background: linear-gradient(21deg, #ff6363, rgb(5, 6, 45));

	// the width of the input border
	padding: 3px;

	// we want inline fields by default
	display: inline-block;

	// we want rounded corners no matter the size of the field
	border-radius: 9999em;

	// style of the actual input field
	*:not(span) {
		position: relative;
		display: inherit;
		border-radius: inherit;
		margin: 0;
		border: none;
		outline: none;
		padding: 0 0.325em;
		z-index: 1; // needs to be above the :focus span

		// summon fancy shadow styles when focussed
		&:focus + span {
			opacity: 1;
			transform: scale(1);
		}
	}

	// we don't animate box-shadow directly as that can't be done on the GPU, only animate opacity and transform for high performance animations.
	span {
		transform: scale(0.993, 0.94); // scale it down just a little bit
		transition: transform 0.5s, opacity 0.25s;
		opacity: 0; // is hidden by default

		position: absolute;
		z-index: 0; // needs to be below the field (would block input otherwise)
		margin: 4px; // a bit bigger than .input padding, this prevents background color pixels shining through
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
		border-radius: inherit;
		pointer-events: none; // this allows the user to click through this element, as the shadow is rather wide it might overlap with other fields and we don't want to block those.

		// fancy shadow styles
		box-shadow: inset 0 0 0 3px #fff, 0 0 0 4px #fff, 3px -3px 30px #ff6363,
			-3px 3px 30px #ff6363;
	}
}

html {
	font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
		Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
	line-height: 1.5;
	font-size: 1em;
}

body {
	text-align: center;
	display: flex;
	align-items: center;
	justify-content: center;
}

html,
body {
	height: 100%;
}

input {
	font-family: inherit;
	line-height: inherit;
	color: #ff6363;
	min-width: 12em;
}

::placeholder {
	color: #cbd0d5;
}

html::after {
	content: "";
	background: linear-gradient(21deg, #10abff, #1beabd);
	height: 3px;
	width: 100%;
	position: absolute;
	left: 0;
	top: 0;
}








//////// checkbox
http:
<label class="cyberpunk-checkbox-label">
            <input type="checkbox" class="cyberpunk-checkbox">
            Check me
        </label>
        <label class="cyberpunk-checkbox-label">
                <input type="checkbox" class="cyberpunk-checkbox">
                Check me
        </label>

Css:
  /* checkbox */
  .cyberpunk-checkbox {
    appearance: none;
    width: 20px;
    height: 20px;
    border: 2px solid #FF6363;
    border-radius: 5px;
    background-color: transparent;
    display: inline-block;
    position: relative;
    margin-right: 10px;
    cursor: pointer;
  }

  .cyberpunk-checkbox:before {
    content: "";
    background-color: #FF6363;
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    width: 10px;
    height: 10px;
    border-radius: 3px;
    transition: all 0.3s ease-in-out;
  }

  .cyberpunk-checkbox:checked:before {
    transform: translate(-50%, -50%) scale(1);
  }

  .cyberpunk-checkbox-label {
    font-size: 18px;
    color: white;
    cursor: pointer;
    user-select: none;
    display: flex;
    align-items: center;
  }


/////// radio

html:
        <h3 style="text-align: center">First Tag:</h3>
            <div class="radio-button-container">
                <div class="radio-button">
                    <input type="radio" class="radio-button__input" id="radio1" name="radio-group1" value="tag1">
                    <label class="radio-button__label" for="radio1">
                        <span class="radio-button__custom"></span>
                    React
                    </label>
                </div>
                <div class="radio-button">
                    <input type="radio" class="radio-button__input" id="radio2" name="radio-group1" value="tag2">
                    <label class="radio-button__label" for="radio2">
                    <span class="radio-button__custom"></span>
                    Angular
                    </label>
                </div>
                <div class="radio-button">
                    <input type="radio" class="radio-button__input" id="radio3" name="radio-group1" value="tag3">
                    <label class="radio-button__label" for="radio3">
                    <span class="radio-button__custom"></span>
                    Vue
                    </label>
                </div>
            </div>

css:
/*radio*/
.radio-button-container {
  display: flex;
  align-items: center;
  gap: 24px;
}

.radio-button {
  display: inline-block;
  position: relative;
  cursor: pointer;
}

.radio-button__input {
  position: absolute;
  opacity: 0;
  width: 0;
  height: 0;
}

.radio-button__label {
  display: inline-block;
  padding-left: 30px;
  margin-bottom: 10px;
  position: relative;
  font-size: 15px;
  color: #f2f2f2;
  font-weight: 600;
  cursor: pointer;
  text-transform: uppercase;
  transition: all 0.3s ease;
}

.radio-button__custom {
  position: absolute;
  top: 0;
  left: 0;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  border: 2px solid #FF6363;
  transition: all 0.3s ease;
}

.radio-button__input:checked + .radio-button__label .radio-button__custom {
  background-color: #FF6363;
  border-color: transparent;
  transform: scale(0.8);
  box-shadow: 0 0 20px #FF6363;
}

.radio-button__input:checked + .radio-button__label {
  color: #FF6363;
}

.radio-button__label:hover .radio-button__custom {
  transform: scale(1.2);
  border-color: #FF6363;
  box-shadow: 0 0 20px #FF6363;
}
